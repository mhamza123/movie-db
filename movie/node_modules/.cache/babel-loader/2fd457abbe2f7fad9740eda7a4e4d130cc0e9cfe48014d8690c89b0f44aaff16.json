{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    fetch(url, {\n      signal: abortCont.signal\n    }).then(res => {\n      if (!res.ok) {\n        // error coming back from server\n        throw Error('could not fetch the data for that resource');\n      }\n      return res.json();\n    }).then(data => {\n      setIsPending(false);\n      setData(data);\n      setError(null);\n    }).catch(err => {\n      if (err.name === 'AbortError') {\n        console.log('fetch aborted');\n      } else {\n        // auto catches network / connection error\n        setIsPending(false);\n        setError(err.message);\n      }\n    });\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort"],"sources":["/home/tk-lpt-0602/Desktop/movie-app/movie-app/src/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n\n    \n    fetch(url, { signal: abortCont.signal })\n    .then(res => {\n      if (!res.ok) { // error coming back from server\n        throw Error('could not fetch the data for that resource');\n      } \n      return res.json();\n    })\n    .then(data => {\n      setIsPending(false);\n      setData(data);\n      setError(null);\n    })\n    .catch(err => {\n      if (err.name === 'AbortError') {\n        console.log('fetch aborted')\n      } else {\n        // auto catches network / connection error\n        setIsPending(false);\n        setError(err.message);\n      }\n    })\n\n    // abort the fetch\n    return () => abortCont.abort();\n  }, [url])\n\n  return { data, isPending, error };\n}\n \nexport default useFetch;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IAGvCC,KAAK,CAACV,GAAG,EAAE;MAAEW,MAAM,EAAEH,SAAS,CAACG;IAAO,CAAC,CAAC,CACvCC,IAAI,CAACC,GAAG,IAAI;MACX,IAAI,CAACA,GAAG,CAACC,EAAE,EAAE;QAAE;QACb,MAAMC,KAAK,CAAC,4CAA4C,CAAC;MAC3D;MACA,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CACDJ,IAAI,CAACV,IAAI,IAAI;MACZG,YAAY,CAAC,KAAK,CAAC;MACnBF,OAAO,CAACD,IAAI,CAAC;MACbK,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,CACDU,KAAK,CAACC,GAAG,IAAI;MACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,YAAY,EAAE;QAC7BC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC9B,CAAC,MAAM;QACL;QACAhB,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAACW,GAAG,CAACI,OAAO,CAAC;MACvB;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAMd,SAAS,CAACe,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,CAACvB,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACnC,CAAC;AAAAL,EAAA,CApCKF,QAAQ;AAsCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}